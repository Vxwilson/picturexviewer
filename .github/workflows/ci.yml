# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch full history for tag analysis
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    # - name: Test with pytest
    #   run: |
    #     pytest
    #     # --- Add this step ---
    - name: Install Xvfb
      run: sudo apt-get update && sudo apt-get install -y xvfb

    # --- Modify the Test step ---
    - name: Test with pytest
      run: |
        xvfb-run -a pytest  # Run pytest with xvfb

    # # --- Automated Version Bumping ---
    # - name: Get previous tag
    #   id: get_previous_tag
    #   uses: "WyriHaxus/github-action-get-previous-tag@v1"
    #   with: 
    #     fallback: '0.0.0'

    # - name: Determine version bump
    #   id: determine_bump
    #   run: |
    #     # Use a script (e.g., bumpversion.sh - see below) to analyze commits
    #     # and determine if it's a MAJOR, MINOR, or PATCH bump
    #     BUMP_TYPE=$(./bumpversion.sh) 
    #     echo "BUMP_TYPE=${BUMP_TYPE}" >> $GITHUB_OUTPUT

    # - name: Bump version and build
    #   run: |
    #     # Use a tool like bump2version or your script to:
    #     # 1. Update the version in your chosen file (version.txt or package manifest)
    #     # 2. Build your application (if necessary)
    #     bump2version --allow-dirty --new-version="${{ steps.get_previous_tag.outputs.tag }}+${{ github.run_number }}" patch ./setup.py
    #     python setup.py sdist bdist_wheel

    # - name: Upload artifacts (optional)
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: your-tkinter-app
    #     path: dist/ 

    # # --- Tagging and Pushing ---
    # - name: Create Tag
    #   if: ${{ github.ref == 'refs/heads/master' }} 
    #   uses: actions/github-script@v6
    #   with:
    #     script: |
    #       const { BumpType } = require('@actions/bump-type');
    #       const bumpType = BumpType.forCommits(github.event.commits);
    #       const newTag = `v${process.env.NEW_VERSION}`; 
    #       github.rest.git.createRef({
    #         ...context.repo,
    #         ref: `refs/tags/${newTag}`,
    #         sha: context.sha,
    #       });
    # - name: Push changes
    #   if: ${{ github.ref == 'refs/heads/master' }} 
    #   uses: ad-m/github-push-action@master
    #   with:
    #     github_token: ${{ secrets.GITHUB_TOKEN }}
    #     branch: ${{ github.ref }}

    - name: Add version info to json file
      env:
        Version: ${{ github.run_id }}.${{ github.run_number }}.${{ github.run_attempt }}
      run: |
        echo "{\"version\": \"$Version\"}" > /version.json
    - name: Package application (example with PyInstaller)
      run: pyinstaller --onefile --icon=dist/Source/Icon/picturexviewer.ico --name=PictureXViewer_v_0.2.7 -w main.py

    - name: Upload artifacts (optional)
      uses: actions/upload-artifact@v3
      with:
        name: your-tkinter-app
        path: dist/ # Path to your built executable
